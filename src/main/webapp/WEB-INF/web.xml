<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <!-- 注意要按顺序加载，否则会报警告-->
    <!--Http_请求参数绑定_post乱码.txt-->
    <filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>


    <!-- 设置所有.html结尾文件的字符编码格式-->
    <jsp-config>
        <jsp-property-group>
            <url-pattern>*.html</url-pattern>
            <page-encoding>UTF-8</page-encoding>
        </jsp-property-group>
    </jsp-config>


    <!-- 自动更新XML 监听器-->
    <listener>
        <listener-class>org.suxuanhua.ssm.tools.AutoUpdateXML</listener-class>
    </listener>


    <!--加载spring 容器-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            classpath:/spring/applicationContext-dao.xml,classpath:/spring/applicationContext-transation.xml,classpath:/spring/applicationContext-service.xml
        </param-value>
    </context-param>

    <!--配置spring 监听器-->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>


    <!-- 配置前端控制器 *.action-->
    <servlet>
        <!-- 该前端控制器名字可以随便起-->
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--
        通过 DispatcherServlet 的父类FrameworkServlet发现
            /** Explicit context config location */
            private String contextConfigLocation;
            所以需要加载配置文件
        -->
        <!-- 加载spring 配置文件 -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <!-- 配置文件的地址，如果不配置，
            默认查找的配置文件是classpath下的<servlet-name>+“-servlet.xml”，即springmvc-servlet.xml-->
            <param-value>classpath:/spring/springmvc.xml</param-value>
        </init-param>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <!--配置前端控制器解析的文件
         如果配置“/”，此工程所有请求全部由springmvc 解析，存在问题：该项目中还存在.jps、.jpg、.html 等等，springmvc 只能解析Handler 的UL。
         此方法可以实现RESTful 方式，需要做特殊处理，就是对静态文件的解析，不能由springmvc 来做
         可以配置*.do 或 *.action，所有请求的URL 扩展名为.do 或 .action 时，由spring 解析时，由springmvc 来解析，此方法常用。
         不可以配置/*，如果配置/*，返回jsp也由springmvc解析，这是不对的。
        -->
        <!-- 注意，该拦截文件后缀可以改成自定义的，
        只要和springmvc.xml 中配置的Handler <bean name="Url.mm"> 中的url 后缀名一样即可，
        因为这样，前端控制器拦到该后缀名的URL 才能找到对应的bean-->
        <url-pattern>*.su</url-pattern>
        <!--<url-pattern>*.action</url-pattern>-->
    </servlet-mapping>


    <!-- log4j2-begin -->
    <context-param>
        <param-name>isLog4jAutoInitializationDisabled</param-name>
        <param-value>false</param-value>
    </context-param>
    <!-- 默认就会找这个文件，不需要额外配置引用-->
    <context-param>
        <param-name>log4jConfiguration</param-name>
        <param-value>classpath:/log4j2.xml</param-value>
    </context-param>
    <listener>
        <listener-class>org.apache.logging.log4j.web.Log4jServletContextListener</listener-class>
    </listener>

    <filter>
        <filter-name>log4jServletFilter</filter-name>
        <filter-class>org.apache.logging.log4j.web.Log4jServletFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>log4jServletFilter</filter-name>
        <url-pattern>/*</url-pattern>
        <dispatcher>REQUEST</dispatcher>
        <dispatcher>FORWARD</dispatcher>
        <dispatcher>INCLUDE</dispatcher>
        <dispatcher>ERROR</dispatcher>
    </filter-mapping>
    <!-- log4j2-end -->


    <welcome-file-list>
        <welcome-file>index.html</welcome-file>
        <welcome-file>index.htm</welcome-file>
        <welcome-file>index.jsp</welcome-file>
        <welcome-file>default.html</welcome-file>
        <welcome-file>default.htm</welcome-file>
        <welcome-file>default.jsp</welcome-file>
    </welcome-file-list>

    <display-name>Teaching Achievement Evaluation System for University Teachers</display-name>


    <!--页面异常-->
    <!-- 400错误 -->
    <error-page>
        <error-code>400</error-code>
        <location>/ExceptionPage.jsp</location>
    </error-page>
    <!-- 404 页面不存在错误 -->
    <error-page>
        <error-code>404</error-code>
        <location>/ExceptionPage.jsp</location>
    </error-page>
    <!-- 500 服务器内部错误 -->
    <error-page>
        <error-code>500</error-code>
        <location>/ExceptionPage.jsp</location>
    </error-page>
    <!-- java.lang.Exception异常错误,依据这个标记可定义多个类似错误提示 -->
    <error-page>
        <exception-type>java.lang.Exception</exception-type>
        <location>/ExceptionPage.jsp</location>
    </error-page>
    <!-- java.lang.NullPointerException异常错误,依据这个标记可定义多个类似错误提示 -->
    <error-page>
        <exception-type>java.lang.NullPointerException</exception-type>
        <location>/ExceptionPage.jsp</location>
    </error-page>

    <error-page>
        <exception-type>javax.servlet.ServletException</exception-type>
        <location>/ExceptionPage.jsp</location>
    </error-page>
</web-app>
